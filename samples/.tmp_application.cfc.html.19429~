Application.cfc

by: Adam Tuttle

<p>
	By now you've learned the basics of ColdFusion, script vs. tag syntax, scopes, how to deal with data, and even some code-reuse techniques. You're now able to write something useful, so it's time we introduce you to the <span class="italic">Request Lifecycle</span>.
</p>
<p>
	You see, when someone requests a ColdFusion page, CF doesn't just start executing your code. There are several events that first take place, which you can be waiting for, and to which you can react. This is not strictly necessary, but you'll find that any complex application will eventually want to make use of some or all of these features, so it's best that you know about them. In order to react to these events, you need to have an <strong>Application.cfc</strong> file. ColdFusion has designated Application.cfc as a special component that it will automatically look for, and in which we can put our event listeners for request lifecycle events.
</p>
<blockquote>
	<p class="lead">A note on Terminology</p>
	<p>
		I'm going to use some technical terminology here for the sake of correctness, so let's explain it quickly. When an event "happens" we call that "broadcasting" the event. When you react to an event, that's called "listening" for it. A function that "listens" for or "handles" an event is often referred to as either an "event listener" or "event handler".
	</p>
</blockquote>
<h2>	
	Section 1: Request Lifecycle Events
</h2>
<p>
	Lifecycle events add a lot of power and flexibility to your ColdFusion applications, so it's important to understand what events are available and why you might want to use each.
</p>
<p>
	<ul>
		<li>
			<strong>onApplicationStart</strong>: The very first time your application is used (think immediately after a reboot), the <code>onApplicationStart</code> event is broadcast. This gives you an opportunity to define some application-specific configuration, prime caches, and do a lot more. The important part to remember is that, as a rule of thumb, it only happens once, until your application times out (hasn't been used in a while), the process is restarted, or the computer is restarted.
		</li>
		<li>
			<strong>onSessionStart</strong>: Any time that a user makes a request to your application and either they haven't used it before, or it's been long enough that their session has expired -- as identified by their cookies, usually -- the <code>onSessionStart</code> event is broadcast. This allows you to set session defaults, like a flag indicating that the user is not currently logged in; or to redirect to the login page.
		</li>
		<li>
			<strong>onRequestStart</strong>: The two previous events have been specific to the first time something happens. <code>onRequestStart</code> is broadcast before every request, giving you an opportunity to set variables that should be accessible on every page in the site, or to validate that the user is allowed access to the requested page, for instance.
		</li>
		<li>
			<strong>onRequest</strong>: The <code>onRequestStart</code> event has this weird cousin, <code>onRequest</code>, which for now we'll just say does almost the same thing, but differently. You can effectively use them both (<code>onRequestStart</code> is broadcast before <code>onRequest</code>), but they operate a little differently. Don't worry, we'll cover this in more depth shortly.
		</li>
		<li>
			<strong>onRequestEnd</strong>: Similarly to <code>onRequestStart</code>, <code>onRequestEnd</code> is broadcast after your template returns control to CF, giving you the opportunity to add code to every request after the requested template has executed. You might use this to add logging, for example.
		</li>
		<li>
			<strong>onSessionEnd</strong>: You may have guessed it, and if so, you were right. There is also an <code>onSessionEnd</code> event, which you can use to do things like empty a shopping cart that was never paid for (thus returning that reserved stock back to availability for other customers to buy).
		</li>
		<li>
			<strong>onApplicationEnd</strong>: And of course, there's an onApplicationEnd event, too. Lovely symmetry, isn't it? This event is broadcast when your application times out (hasn't been used in a while), or if ColdFusion is shutting down.
		</li>
		<li>
			<strong>onError</strong>: Lastly, there is an <code>onError</code> event broadcast in the event of an un-caught exception, including any you might manually throw. This gives you a last line of defense to deal with any errors that might have slipped through the cracks in your applications.
		</li>
	</ul>
</p>	
<h2>
	Section 2: Time for the Code!
</h2>
<p class="italic">
	If you're reading this book sequentially, you've already been exposed to ColdFusion Components, or CFC's. If not, please go back and read the previous chapter.
</p>
<p>	
	Create a new component, name it <code>Application.cfc</code>, and let's start putting some things into it. We'll start with <code>onApplicationStart</code>.
</p>
<blockquote>
	For the sake of keeping the mid-chapter code samples brief and readable, I'll only show one function at a time; but any combination of them, all of them, or none of them could be in your component, and the order they are in has no effect.
</blockquote>
<pre class="prettyprint">
component {

    function onApplicationStart(){
        application.datasource = "my_database";
        return true;
    }

}
</pre>
<p>
	This method listens for the <strong>onApplicationStart</strong> event and sets the value "my_database" into the Application Scoped variable named "datasource." This function, <code>onApplicationStart</code>, will only be called on the relatively rare occasion that your Application has timed out or is otherwise not already running. The benefit of this should be clear: You can put a lot of code in here, and it will only be executed once in awhile, instead of for every request.
</p>
<p>
	This is the logical place to set most Application-scoped variables; since the variables live as long as the application, and when the application is just starting up, this method will re-initialize them for you. For that reason, it makes perfect sense to set your application configuration as application-scoped variables in the <code>onApplicationStart</code> method.
</p>
<p>
	Of course, every single one of the events broadcast for Application.cfc are optional. You don't have to include listeners for all of them; most people don't.
</p>
<h3>
	onRequest
</h3>
<p>
	Do you remember when I said that <strong>onRequest</strong> was a little bit different? Here's how. The requested template, e.g. <code>index.cfm</code>, will be passed to <code>onRequest</code> as an argument, and it's up to you to <strong>include</strong> it.
</p>
<p>
	This allows you more control over what happens before and after template execution, and allows you to wrap the include; for example, in a transaction, or in a try/catch block. Here's how it might look:
</p>
<pre class="prettyprint">
component {

    function onRequest( string targetPage ) {

        try {
            include arguments.targetPage;
        } catch (any e) {
            //handle the exception
        }

    }
}
</pre>
<h3>
	onSessionEnd and onApplicationEnd
</h3>

<p>
	<strong>onSessionEnd</strong> is passed two arguments, SessionScope, and ApplicationScope. Neither is direct access to the actual Session or Application scopes, and instead, are copies of what those scopes were as the session was ending. <strong>onApplicationEnd</strong> is similarly passed a copy of the former Application scope.
</p>
<p>
	They are called when the session expires and the application stops, respectively, whether or not a request is made. For that reason, there may not be a "page" to render any output to. Instead, use alternative output options like logging, writing to files, and email, if you need any output from either of them.
</p>

<h3>
	onError
</h3>
<p>
	This method is passed two arguments: Exception and EventName. Exception is functionally equivalent to a <a href="http://help.adobe.com/en_US/ColdFusion/10.0/CFMLRef/WSc3ff6d0ea77859461172e0811cbec22c24-7ec5.html" target="_new">CFCatch</a> result, and EventName is the name of the event handler in which the error occurred. If the error occurred in a requested template (e.g. not in Application.cfc), and you have not implemented <code>onRequest</code>, it will be an empty string.
</p>
<p>
	A common practice is to use this method to catch application exceptions and send a notification to the developer(s) via email. While this is a perfectly functional approach, it tends not to scale well as your application grows and errors become more frequent. If you start to notice yourself spending too much time dealing with error emails, look into community projects like <a href="https://github.com/oarevalo/BugLogHQ" target="_new">BugLogHQ</a> and <a href="http://aarongreenlee.com/share/hoth-coldfusion-errors-tracking-reporting/" target="_new">Hoth</a>.
</p>
<h3>
	onSessionStart, onRequestStart, and onRequestEnd
</h3>
<p>	
	These methods are very similar to <code>onApplicationStart</code> in their usage, with the one exception that <code>onRequestStart</code> is passed the targetPage as an argument. None of them need to return anything or are required to operate in any specific way. The above samples pretty well summarize how you would write each of the Request Lifecycle Event methods, so we won't bore you by writing the same code sample over and over. You'll find a complete empty template for an <code>Application.cfc</code> at the end of this chapter. Once you grasp the basics, it should be pretty self explanatory as a reference.
</p>
<h2>
	Section 3: More than Just Events
</h2>
<p>
	As if that wasn't enough, Application.cfc has more parts!
</p>
<p>
	You are free to define as many other functions in Application.cfc as you would like, if they would be of use. These functions will be available for use anywhere in Application.cfc, and anywhere in a template included from <code>onRequest</code>. However, if a template from <code>onRequest</code> is not included, the functions will not be available to every template in your application.
</p>
<p>
	It also accepts setting certain configuration settings in the implicit constructor, discussed in the Components section of the Code Reuse chapter. To review, anything inside a component (between the <code>&lt;cfcomponent&gt;&lt;/cfcomponent&gt;</code> tags or the <code>component {}</code> braces) but not inside a function, is part of the implicit constructor, and as such will be executed during the instantiation of the component.
</p>
<p>
	ColdFusion defines more than 20 settings that can be set and updated from the implicit constructor in Application.cfc, however, a full discussion of each is outside the scope of this article. We'll cover the basics, and for the rest, you should <a href="http://help.adobe.com/en_US/ColdFusion/10.0/CFMLRef/WSc3ff6d0ea77859461172e0811cbec22c24-750b.html" target="_new">read the official documentation</a>. Inexplicably, the primary documentation for Application.cfc settings makes no mention of it, but there are also numerous ORM-related settings that can be configured here, which is documented in <a href="http://help.adobe.com/en_US/ColdFusion/10.0/Developing/WSED380324-6CBE-47cb-9E5E-26B66ACA9E81.html" target="_new">ORM Settings</a>.
</p>
<h3>
	Basic settings
</h3>
<p>
	Every application needs a name. It must be more or less alphanumeric and as a best practice, should not include spaces or any symbols or punctuation. This name is used to create different contexts for each application running on the server, so that they don't share any memory. Without a unique name, your application's code could potentially overwrite memory values for another application.
</p>
<pre class="prettyprint">
this.name = "my_application3";
</pre>
<p>
	While a default application timeout setting is set server-wide in the CF Administrator, you can override this setting, up to a CF Administrator defined limit, with <code>this.applicationTimeout</code>.
</p>
<pre class="prettyprint">
this.applicationTimeout = CreateTimeSpan(10, 0, 0, 0); //10 days
</pre>
<p>
	Custom tags, covered in the Code Reuse chapter, can be sourced from numerous directories. You can add to the global list in the CF Administrator, and your Application.cfc can also define some of its own additions to the list; making your code more portable.
</p>
<pre class="prettyprint">
this.customTagPaths = [ expandPath('/myAppCustomTags') ];
</pre>
<p>
	Similarly, you can set per-application mappings that supercede any mappings of the same name set in the CF Administrator for requests in your application.
</p>
<pre class="prettyprint">
this.mappings = {
    "/foo" = expandPath('/com/myCompany/foo')
};
</pre>
<p>
	Each application is allowed one app-global default datasource, which will be used if none is defined for a query or stored procedure.
</p>
<pre class="prettyprint">
this.datasource = "my_datasource";
</pre>
<p>
	Session management -- whether or not sessions are enabled and tracked for your application -- can be enabled or disabled via the <code>sessionManagement</code> setting. You can also specify the session timeout.
</p>
<pre class="prettyprint">
this.sessionManagement = true;
this.sessionTimeout = CreateTimeSpan(0, 0, 30, 0); //30 minutes
</pre>
<p>
	<strong>Just a reminder:</strong> Do yourself a favor and check out the <a href="http://help.adobe.com/en_US/ColdFusion/10.0/CFMLRef/WSc3ff6d0ea77859461172e0811cbec22c24-750b.html" target="_new">primary list of other available settings</a>, as well as the <a href="http://help.adobe.com/en_US/ColdFusion/10.0/Developing/WSED380324-6CBE-47cb-9E5E-26B66ACA9E81.html" target="_new">ORM settings</a>.
</p>
<h2>
	Section 4: What is an Application?
</h2>
<blockquote>
	This section is inspired by a similar section of a <a href="http://www.bennadel.com/blog/726-ColdFusion-Application-cfc-Tutorial-And-Application-cfc-Reference.htm" target="_new">typically thorough</a> blog post from Ben Nadel. Not sure what protocol is on citing references like this.
</blockquote>
<p>
	ColdFusion applications differ from traditional desktop applications in that they are not always "running" when enabled. CF Applications only ever do anything when an http request is made; with the exception of special cases like <code>onApplicationStop</code> and <code>onSessionStop</code>.
</p>
<p>
	When a request is made during the execution of the Application.cfc implicit constructor code, the applicable application name is determined, and the applicable memory scopes for that application are associated with the request. Then, any necessary events are broadcast and responded to, in serial (onSessionStart will not fire before onApplicationStart returns; onRequestStart waits for onSessionStart, and so on...). Control is then passed to the requested template. After the template completes, control shifts back to Application.cfc where onRequestEnd, if defined, will be executed.
</p>
<h2>
	Section 5: Where does Application.cfc go?
</h2>
<p>
	Technically speaking, and assuming the default settings from a vanilla ColdFusion install, you can have an Application.cfc anywhere within your application structure, and even a few places outside of it. Doing so implies that everything in that folder and all of its subfolders (and theirs, and theirs...) are part of that application.
</p>
<p>
	If a request is made for <code>you.com/foo/bar/widgets/index.cfm</code>, CF looks inside that widgets folder for an Application.cfc. If found, then it uses the application name set therein. If not found, CF then checks the parent folder, bar. This process is repeated over and over until it reaches the system root. This is the default setting as of ColdFusion 10.
</p>
<p>
	You can change this setting in the CF Administrator, under <strong>Server Settings > Settings</strong>, near the bottom of the page, under the heading "Application.cfc/Application.cfm lookup order." Other options are "until webroot", where the process described above stops at the web root instead of the system root, and "in webroot", which specifies that CF should only ever look for <code>you.com/Application.cfc</code>.
</p>
<h3>
	Applications inside Applications
</h3>
<p>
	The obvious next question is, if we can have Application.cfc files anywhere, can we nest one application inside another? The answer is <strong>Yes</strong>.
</p>
<p>
	Consider the following directory structure:
</p>
<p>
	Here we have two applications: One for the main website, and one for the admin section of the site. Since there is no Application.cfc in the widgets folder, any requests to <code>widgets/sprockets.cfm</code> will use the Application.cfc from the parent folder.
</p>
<p>
	The two applications can have completely different settings and different code for their event handlers, as long as they have distinct names.
</p>
<h2>
	Section 6: What's Application.cfm?
</h2>
<p>
	A relic of a bygone time! Back in the dark ages, before ColdFusion had components, Application.cfm was a similar approach to solve some of the same problems. The primary difference is that everything in Application.cfm is executed at the start of every request, more or less like the <code>onRequestStart</code> method does now. The other major difference is that instead of the component implicit constructor to set configuration settings, you set them as arguments to the <code>&lt;cfapplication&gt;</code> tag.
</p>
<p>
	You can "fake" similar functionality to onApplicationStart in Application.cfm by using a flag in the application scope:
</p>
<pre class="prettyprint">
&lt;cfif not structKeyExists(application, "initialized")&gt;
    &lt;cfset application.datasource = "my_datasource" /&gt;
    &lt;cfset application.initialized = now() /&gt;
&lt;/cfif&gt;
</pre>
<p>
	Depending on what you are doing inside that block, you may want to make use of locking to prevent multiple simultaneous requests from all executing the application initialization code at the same time.
</p>
<p>
	Fortunately, we have evolved. These days, Application.cfm is mostly just a sign of old code.
</p>
<h2>
	Appendix: Application.cfc Template
</h2>
<p>
	For your reference, here is an empty Application.cfc, with all of the bells and whistles waiting to be filled in.
</p>
<pre class="prettyprint">
component {

    this.name = "myApplication";
    this.applicationTimeout = CreateTimeSpan(10, 0, 0, 0); //10 days
    this.datasource = "my_datasource";
    this.sessionManagement = true;
    this.sessionTimeout = CreateTimeSpan(0, 0, 30, 0); //30 minutes
    this.customTagPaths = [ expandPath('/myAppCustomTags') ];
    this.mappings = {
        "/foo" = expandPath('/com/myCompany/foo')
    };

    // see also: http://help.adobe.com/en_US/ColdFusion/10.0/CFMLRef/WSc3ff6d0ea77859461172e0811cbec22c24-750b.html
    // see also: http://help.adobe.com/en_US/ColdFusion/10.0/Developing/WSED380324-6CBE-47cb-9E5E-26B66ACA9E81.html

    function onApplicationStart() {
        return true;
    }

    function onSessionStart() {}

    // the target page is passed in for reference, 
    // but you are not required to include it
    function onRequestStart( string targetPage ) {}

    function onRequestStart( string targetPage ) {
        return true;
    }

    function onRequest( string targetPage ) {
        include arguments.targetPage;
    }

    function onRequestEnd() {}

    function onSessionEnd( struct SessionScope, struct ApplicationScope ) {}

    function onApplicationEnd( struct ApplicationScope ) {}

    function onError( any Exception, string EventName ) {}

}	
</pre>	
	
