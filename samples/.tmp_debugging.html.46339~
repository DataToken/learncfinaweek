<p>
	While the best efforts are made to stop errors from happening, they do happen.  Sometimes the errors might be due to some bad code; other times it may be due to external resources that are out of one's control.  During the development process, these errors hold valuable information that allows us to improve and fix our code, but in production environments, these errors hold information that can make our servers vulnerable to attack.  It is important that as a developer you anticipate errors and gracefully handle them.  Thankfully, ColdFusion offers a number of ways  to trap those errors and even allow developers to react to those errors and call alternative functionality.
</p>
<h2>
	Understanding Errors
</h2>
<h3>
	Error Types
</h3>
<p>
	Before we look at how to handle the errors, lets first take a look at the errors themselves.  There are three types of ColdFusion Errors:
</p>
<p>
	<ul>
		<li>Exception - Where the error stops the request from completing its process.</li>
		<li>Missing Template - When an HTTP request for a page can not be found.</li>
		<li>Form Field Data Validation - When server side form validation fail.</li>
	</ul>
</p>

<p>
	The most common error type you are going to experience is the Exception type.  Unless the users are requesting a page that does not exist, or you have decided to use ColdFusions in-built form validation (not recommended by most ColdFusion developers), you will receive an Exception error.
</p>
<p>
	These exception errors, excluding custom errors, fall into one of the following exception types:
</p>
<p>
	<ul>
		<li>Database - When there is a problem with a database cal,l such as malformed SQL or database connection issue.</li>
		<li>MissingInclude - When an included file can not be found.</li>
		<li>Template - When a general error occurs, usually from a malformed tag or incorrect script syntax.</li>
		<li>Object - When an error occurs with an object.</li>
		<li>Security - When an error occurs related to security functionality.</li>
		<li>Expression - When an expression fails, such as 1 + "a."</li>
		<li>Lock - When an error occurs with a piece of code that has been locked by the application.  This can be due to the code failing at runtime or a lock timing out.</li>
		<li>SearchEngine - When there is an issue with the Verity Search Engine.</li>
		<li>Application - When custom errors are generated by the cfthrow tag that do not have a type defined.</li>
	</ul>
</p>
<p>
	Knowing the type of exception thrown can be useful when handling your errors gracefully.  Depending on the type of exception, it might be possible to retry a section of code again.  For example, if a section of code that communicates with an external service times out, you might want to try again to see if the second time is successful.  If you try this approach with some errors, it is important to keep in mind that your request might never be successful and that the error must then be handled a different way.
</p>
<h3>
	Error Data
</h3>
<p>
	For every error thrown, there are 2 standard error formats that contain relevant information to the error.  The format of error you get depends on the settings within your ColdFusion Administrator.  Under the Debugging & Output Settings there is an option called Debug Output Settings.  On that page there is an option called Enable Robust Exception Information.  Checking that will provide additional information to the page.  These two formats are only relevant if the error is displayed to the user.  Checking this box will not alter the information that is provided to the system if the error is caught programmatically.  It is strongly advised to never enable the Robust Exception Information on a production server.  If your error handling were to fail, this would display sensitive information to the user which you would not want them to see.
</p>
<p>
	If the error is caught programmatically you will have access to the following information:
</p>
<p>
	<ul>
		<li>Message - This provides you a brief, one line summary of the error.</li>
		<li>Detail - This provides additional information about the error along with suggested solutions, if there are any.</li>
		<li>Stack Trace - This shows the contents of the java stack at the time of the exception.</li>
		<li>Tag Context - This provides a list of all files that were called called and from what lines they were called.</li>
		<li>Type - The type of the exception.</li>
	</ul>
</p>

<p>
	Depending on the type of exception thrown, you might have access to additional pieces of information; however, these fields will always be present.
</p>

<h2>
	Error Logs
</h2>
<p>
	ColdFusion has extensive capabilities when it comes to error logs.  Later in this chapter we will review how to create your own log entries, but for now, let's look at the automatic log entries. 
</p>

<p>
	Every time that the default error handler is used, which is when ColdFusion displays the error for you on the screen, an entry is entered into the ColdFusion Error Log.  This Error Log is accessible via a log viewer application or via the ColdFusion Administrator.  To access the Error Log, simply open up your ColdFusion Administrator and go to: Debugging & Logging > Log Files.  From this screen you will see all the log files that ColdFusion creates.  If you created any custom logging, you would also see the log files here.  Notice that each log file has a number of different icons, allowing for different actions on the log.  These actions include searching and viewing the log, archiving the log, and deleting the log.  To view the errors on your application, you can select the application.log file or the exception.log file.  Each log file gives a different type of information and can be used to find errors within your application.
</p>

<h2>
	Error Management
</h2>
<p>
	Now that there is an understanding of what errors are, let's take a look at Error Management.  There are a number of ways in which you can capture an error and handle it with ease.  When capturing the error, you might decide to run an alternate piece of code, but sometimes you might just want to notify the user that an error has occurred and send the information back to yourself for resolving later. Whatever way you wish to handle the error, you will need to use one of these forms of Error Handling.
</p>
<h3>
	CFTRY/CFCATCH
</h3>
<p>
	The use of the CFTRY and CFCATCH tags allows you to provide error handling around a specific section of code.  This method is often used when you wish to provide alternate processing of code.  The CFTRY tag is wrapped around the section of code that you can monitor for issues.  If anything within the CFTRY tag causes an error, the matching CFCATCH tag will catch the error and allow you to provide alternate processing.  Using this method will prevent the error from making its way to the user.  Inside the CFTRY tag you can put any ColdFusion logic, including calling objects and including files.  If any errors occur from within these external resources, the error will still be caught, assuming those external files do not have their own error handling in them.
</p>

<p>
	At the end of the CFTRY block, but before the closing tag, you will place at least one CFCATCH tag.  The CFCATCH tag is where you will place your alternate processing.  The CFCATCH tag must provide a type attribute which specifies which type of exception it will catch.  Multiple CFCATCH tags can be used within a CFTRY tag as long as they all have different types specified.  Providing different CFCATCH tags allows you to handle the different exception types differently.  If you do not want to handle different exception types differently you can use the exception type of any,  which will catch all exception types.
</p>
<p>
	Here is an example of a CFTRY/CFCATCH:
</p>
<pre class="prettyprint">
&lt;cftry&gt;
	&lt;!--- Your code ---&gt;
	
	&lt;cfcatch type="database" &gt;
		&lt;!--- Code to handle a database exception ---&gt;
	&lt;/cfcatch&gt;	 
	&lt;cfcatch type="any"&gt;
		&lt;!--- Code to handle all other exceptions ---&gt;
	&lt;/cfcatch&gt;
&lt;/cftry>
</pre>
<p>
	If you prefer your code to be script based, here is a script based example:
</p>
<pre class="prettyprint">
try{
	//Your code
}	
catch(database exception){
	//Code to handle database exception
}
catch(any exception){
	//code to handle all other exception
}
</pre>
<p>
	Once the CFTRY has run and any exceptions have been dealt with or ignored if you so choose, the page will continue to process from the closing CFTRY tag. If, once the exception has been caught, you do not wish to handle the exception, but want to pass it off to the next level of error handling, you can use the CFRETHROW tag.  The CFRETHROW tag will then bubble the error up the chain of Error Management.  The page will then no longer continue to process.
</p>
<p>
	Here is an example of the CFRETHROW in action:
</p>
<pre class="prettyprint">
&lt;cftry&gt;
	&lt;!--- Your code ---&gt;
	
	&lt;cfcatch type="database" &gt;
		&lt;!--- Code to handle a database exception ---&gt;
	&lt;/cfcatch&gt;	 
	&lt;cfcatch type="any"&gt;
		&lt;cfrethrow /&gt;	
	&lt;/cfcatch&gt;
&lt;/cftry&gt;
</pre>
<p>
	And in script format:
</p>
<pre class="prettyprint">
try{
	//Your code
	}	
catch(database exception){
	//Code to handle database exception
}
catch(any exception){
	//code to handle all other exception
	rethrow();
}
</pre>

<h3>
	CFTHROW
</h3>
<p>
	Sometimes when developing an application, it may be necessary to create your own error to be thrown.  Perhaps you are making an HTTP request and you did not receive the expected 200 response.  In those situations you can use the CFTHROW tag to throw your own exception.  That exception will then get picked up by the first level of your Error Management solution.
</p>
<p>
	When using the CFTHROW tag, you have a number of useful attributes at your disposal.  The most useful attributes are the type and message attributes.  The type attribute allows you to specify the type of error being thrown.  This type does not need to be one of ColdFusion's predefined exception types and can be a custom type of your own choosing.  This can be very useful when used within a CFTRY/CFCATCH block, as your CFCATCH type can also match that custom type.  The message attribute is also very useful; it allows you to provide a message, or reason, for the error.  This message could then be relayed back to you via a global part of your Error Management solution.
</p>
<p>
	Here is an example of a CFTHROW inside of a CFTRY/CFCATCH:
</p>
<pre class="prettyprint">
&lt;cftry&gt;
	&lt;!--- Your code ---&gt;
	
	&lt;cfcatch type="database" &gt;
		&lt;!--- Code to handle a database exception ---&gt;
	&lt;/cfcatch&gt;	
	&lt;cfcatch type="any"&gt;
		&lt;cfthrow 
			message="I am an Error" 
			type="specialError"
			detail="This is where I put extra detail"	 	 
				 />&gt;
	&lt;/cfcatch&gt;
&lt;/cftry&gt;
</pre>
<p>
	And in script format:
</p>
<pre class="prettyprint">
try{
	//Your code
	}	
catch(database exception){
	//Code to handle database exception
}
catch(any exception){
	//code to handle all other exception
	throw(message='I am an error', type="specialError", detail="This is where I put extra detail");
}
</pre>
<h3>
	CFFINALLY
</h3>
<p>
	The CFFINALLY tag is placed inside the CFTRY block of code after the CFCATCH blocks.  The CFFINALLY tag will always execute, even if no errors occur.  This tag can be useful when there is some functionality you always want to run, such as functionality that will free up resources.
</p>
<p>
	Here is an example of CFFINALLY in action:
</p>
<pre class="prettyprint">
&lt;cftry&gt;
	&lt;!--- Your code ---&gt;
	
	&lt;cfcatch type="database" &gt;
		&lt;!--- Code to handle a database exception ---&gt;
	&lt;/cfcatch&gt;	 
	&lt;cfcatch type="any"&gt;
		&lt;!--- Code to handle all other exceptions ---&gt;	
	&lt;/cfcatch&gt;
	&lt;cffinally&gt;
		&lt;!--- This code will always run ---&gt;
	&lt;/cffinally&gt;
&lt;/cftry&gt;
</pre>
<p>
	And in script format:
</p>
<pre class="prettyprint">
try{
	//Your code
	}	
catch(database exception){
	//Code to handle database exception
}
catch(any exception){
	//code to handle all other exception
}
finally{
	//This code will always run
}
</pre>

<h3>
	onMissingTemplate
</h3>	
<p>
	Within the Application.cfc file you can specify a function called onMissingTemplate.  This method will be called when a requested page does not exist.  If this method is called, the standard onApplicationStart and onRequestStart methods are not called.  If the onMissingTemplate function returns 'false,' then the control is passed back to the servers 404 handler.
</p>
<p>
	When the onMissingTemplate function is called, it is up to you how you handle the issue.  The most common thing to do is to include a site specific custom 404 page and notify the user that the page is missing.  As the method receives the path of the file that was requested, you also have the ability to perform an action based on that information.  For example, if you have a file that is often mistyped, you could look at the provided information, decide what page they really wanted, and redirect them to that page.  
</p>
<h3>
	onError
</h3>
<p>
	If you wanted to catch all errors within a specific site, you can use the onError method inside of the Application.cfc.  The onError method will be fired by any error that occurs in your site that is not caught inside of a CFTRY/CFCATCH block. The onError method will catch all exception types, although it will not catch exceptions thrown due to syntax errors such as malformed tags.  Those errors will bubble up to the next level of Error Management.
</p>
<p>
	The onError method is the most common Error Management method.  Using this method allows you to track all errors from your site and handle them accordingly.  The most common method for handling these errors is to display a 'Sorry' page to your users and notifying one of your development staff of the information.  
</p>
<p>
	The onError method receives 2 arguments, the Exception and the EventName.  The exception is a structure that contains all the information about the error.  The information that will be included in this structure was discussed previously in this chapter.  If you choose to have the onError method send an email to one of your developers, then this information can be included in the email to provide specific information related to the issue and should help them resolve the issue. 
</p>
<p>
	Here is an example of an onError method in script format.  This code will capture the error, include a 'Sorry' page, and email the information to a developer.
</p>
<pre class="prettyprint">
public void function onError(required any exception, required string eventname){
	include "sorry.cfm";
	
	var errorEmail = new mail();
	errorEmail.setTo(application.developerEmail);
	errorEmail.setFrom(application.systemEmail);
	errorEmail.setSubject('An Error has Occured');
	errorEmail.setBody('
		Message: #arguments.exception.message#<br />
		Details: #arguments.exception.detail#<br />
		Type: #arguments.exception.type#<br />
	');
	errorEmail.setType('html');
	errorEmail.send();
}
</pre>

<h3>
	Site-wide Error Handling
</h3>
<p>
	The last possible level of Error Management you can create, prior to having the default ColdFusion Error displayed to the user, is to create a Site-wide Error page.  The Site-wide Error page is not actually site specific.  A better name for this page would be a Server-wide Error page, as only 1 can be set on the server and will be displayed to all websites on the server.  It is important to remember this when it comes to styling this page, for if you have multiple sites on the server, you do not want it branded for one specific site.  Even though the page is not specific to a site on the server, it is a useful back up to have in place as it will catch ALL errors, including tag syntax errors, which onError will not catch.
</p>
<p>
	To specify a Site-wide Error Handler, you need to open up your ColdFusion Administrator and navigate to Server Settings > Settings.  On this page, under the Error Handlers heading, you will see a Site-wide Error Handler box.  In this box you will enter the location of the file you wish to be displayed.  The path that you use should be relative to the server root. For example if you had a folder called serverWideFiles in the root the server (remember, server, not site), then it might look like '/serverWideFiles/globalErrorHandler.cfm'.
</p>
<h2>
	Multiple Error Handling Strategy
</h2>

<p>
	When creating Error Handlers for your web site, it is often best to have multiple handlers in place.  The main goal for any Error Handling Strategy is to prevent the generic ColdFusion error page from displaying to your user.  Not only does this not look professional, it also shows users sensitive information about your server, such as file location paths.  It is also important to remember that not all the Error Handlers catch all the errors, except the Site-wide error handler (which is the least accommodating handler). 
</p>
<p>
	When an error is thrown, it will bubble up the application until the first Error Handler catches it.  The order in which the handlers will be called is:
</p>
<p>
	<ol>
		<li>CFCATCH</li>
		<li>onError</li>
		<li>Site-wide Handler</li>
		<li>ColdFusion Generic Handler</li>
	</ol>
</p>


<h2>
	Things To Remember
</h2>

<p>
	When looking at Error Handling, there are a few things you should remember:
</p>
<p>
	While in development, there is no need for error handling.  You will want to see any errors immediately so that you can resolve them right away.  Place checks in your Error Handlers that can tell if you are in a development or production environment.  The most common method for this is to check if the CGI.remote_addr is 127.0.0.1.  If it is, then that means you are running the code on your local machine.
</p>
<p>
	When displaying a 'Sorry page', use as little ColdFusion as possible and do not include any files.  The sorry page is being displayed because there is a problem in the code.  Imagine if the problem is an issue within the header of your web site and you include the header.  The 'Sorry' page will now throw an error.  If your 'Sorry' page throws an error, it is possible that the 'Sorry' page will get called again, and again, and again.  The next thing you know, you will have created an infinite loop that could take down your server.  If you want to have the site header and footer on the jSorry' page, then place the generated HTML in the 'Sorry' page so that you know the page will not throw any errors.
</p>
----------

<h2>
	Debugging
</h2>
<p>
	Fixing problems within your code can sometimes be very difficult.  If the problem you are experiencing is an error, then the chances are it is pretty easy to fix as you already know the file and line number of the issue.  If the issue you are trying to fix is that a piece of functionality is not acting as you expected, then the problem is a bit harder to resolve.  There is no sure way to find these problems and fix them, but there are a few debugging methods that can often help you find the problem area.
</p>
<h2>
	Request Debugging Output
</h2>

<p>
	When trying to debug a problem within your application, it can sometimes be a very easy task or sometimes it can be a very arduous task.  When an error is thrown, you often know the file and line number of the problem and you can fix it very easily.  Sometimes the problem is that the application is not doing what you expected it to do and often this is a much harder problem to resolve.  During these situations, the more information you have, the better.  This is where the Request Debugging Output can help you.
</p>
<p>
	On every page request, there is a lot of information that ColdFusion has about the request that you do not usually see.  By default, this output is turned off,as it is not recommended that this be turned on in a production environment as it can slow down the page load times.  If it were enabled on a production server, the information would not be displayed to everyone, as it is only shown to approved IP addresses.  To turn on the Request Debugging information on your local server, log in to the ColdFusion Administrator and go to  Debugging & Logging > Debug Output Settings; select the Enable Request  Debugging Output checkbox.  Once you click save, you should now see the debugging information at the bottom of every ColdFusion page that runs on your server.  If you go to a ColdFusion page you do not see that information, log back in to the ColdFusion Administrator and go to Debugging & Logging > Debugging IP Addresses.  On this screen you will see a list of all IP addresses that are able to see the debugging information. Click on the Add Current button.  This will add your local IP address to the list (127.0.0.1 and 0:0:0:0:0:0:0:1 are added automatically) and you should now see debugging information on every ColdFusion request.
</p>
<p>
	The debugging information offers a lot of request information that can be very useful when debugging an issue.  The output is comprised of the following sections:
</p>
<p>
	<ul>
		<li>Debugging Information  - This section gives you information about where the requested file is located, date and time information as well as some other server related information.</li>
		<li>Execution Time - This section gives you a list of all files that were executed in the request, in the order in which they were called, and how long they took to run.  This information is very useful when debugging slow page loads or when needing to see all the files that were called.</li>
		<li>SQL Queries - This section displays all the SQL queries that were run on the page along with the SQL executed, how many records were returned, and how long the query took.</li>
		<li>Trace Points - This section works with the CFTRACE tag.  This will be discussed later in this chapter. </li>
		<li>Scope Variables - This section is where the data that is stored in different scopes are output.  Which scopes are output is controlled in the ColdFusion Administrator on the same page where you turned on this feature.</li>
	</ul>
</p>


<p>
	Using this information, you can often find where the problem might be occurring.
</p>
<h2>
	CFTRACE
</h2>

<p>
	The CFTRACE tag allows you to record the state of variables within your application at a specific time.  It tracks the run-time logic flow, variables values, and execution time.  The CFTRACE tag can be placed anywhere inside your code any number of times.  You can specify a variable that you wish to trace, some text to associate with the trace, if you wish the trace to be inline or not, and if you wish it to stop the processing of the page or not.  The trace tag has two output options: inline or not inline.  If the inline attribute is set to true, then the trace information will be displayed at the end of the page request as well as within the request debugging output.  If the attribute is set to false, then the information will only be displayed in the debugging output.  In addition to the information being displayed on the page, the same information is stored in the cftrace.log file in the ColdFusion Administrator.
</p>
<p>
	The CFTRACE tag has an abort option, which, when set to yes, will halt the page processing right after the tag.  If this is set to false, the page will continue to process.  Often, the best way to use the CFTRACE tag is to not set the abort option to true, but to let the page run.  Placing multiple CFTRACE tags within the site will allow you to see the value of a variable at different stages of the request cycle.  This will often allow you to track down where unexpected anomalies might occur.
</p>
<p>
	Here is an example of the CFTRACE tag.  In this example we are tracing a variable called today:
</p>
<pre class="prettyprint">
&lt;cftrace  
    var = "today" 
    text = "I am expecting this to be Friday" 
    type = "information"&gt;
</pre>
<p>
	Here is the output we received when the tag was run:
</p>
<pre class="prettyprint">
 [23:26:26.012 /Users/simon/Sites/learncfinaweek/frontend/views/main/default.cfm @ line: 8] [33 ms (1st trace)] - [today = Sunday] I am expecting this to be Friday
</pre>
<p>
	As you can see, the value of Today is Sunday.  As you can tell from the text added, we expected the value to be Friday; these values do not match, so we know that we must be close to our problem.
</p>
<h2>
	CFDUMP
</h2>

<p>
	Another method to help debugging a problem is to use the CFDUMP tag.  The CFDUMP tag will output any variable, even variables that are not a simple value.  Dumping variables allows you to see the current state of the variable and any values it might hold.  If the variable is more complex, such as an object or ORM entity, then the CFDUMP tag will show you all available properties and methods for that object.  In its simplest use case, the CFDUMP tag is provided a variable to be dumped.  For simple variables, this is fine, but for variables that are more complex, such as ORM Entities, this can cause for a lot of information to be output and possibly cause a Java Heap error.  For more complex variables, it is often necessary to use some additional attributes.  The top attribute allows you to specify a number which represents the depth that you wish the dump to go.  For example, if you specified a top value of 3 and the variable was a query, only the top 3 rows would be output.
</p>
<p>
	When CFDUMP is called, it outputs the provided variable and the page continues to process.  In some scenarios, it is necessary for you to stop the page process right after the dump.  If you are writing the CFDUMP tag, then you can simply add the word 'abor't to your attribute list, and the page will stop processing after the tag.  If you are using the script version, like the writedump function,  you do not have access to that feature and you must place an 'abort' call after your writedump function call.
</p>
<p>
	In situations where you have multiple CFDUMPs being called, it might get confusing which output relates to which tag in your files.  For that purpose, there is a label attribute that allows you to specify some text which will be displayed with your dump.
</p>
<p>
	Here is an example of a CFDUMP that dumps the session scope, only going 3 levels deep, and aborting once it has run:
</p>
<pre class="prettyprint">
&lt;cfdump 
	var="#session#" 
	label="I am the session scope" 
	top="3"
	abort /&gt;
</pre>
<p>
	And here is the script alternative:
</p>
<pre class="prettyprint">
writedump(var="#session#" top="3" label="I am the session scope");
abort;
</pre>
