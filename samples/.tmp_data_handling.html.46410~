Databases

<p>
	One of the key parts of any application is its ability to do CRUD (Create, Read, Update, and Delete) operations.  ColdFusion has the ability to read a variety of data sources with minimal effort; there is built in support for over ten different databases.  Among the supported databases, you will find MS SQL, MySql, Oracle, DB2, and Sybase. There are slight sql syntax differences when interacting with the database; however, the same code can be used against different databases without any changes.
</p>

<blockquote>
	<strong>Note:</strong> This chapter will not teach you how to write sql.  However, it will show you how to take the sql skills you have and incorporate them into your code.  Alternatively, if you are using ColdFusion Builder, you can use the query builder to assist you with query creation.
</blockquote>

<h2>
	Query Basics
</h2>
<p>
	A data source needs to be configured in the administrator. The data source contains all the connection information that ColdFusion needs to communicate with your database.  Rather than providing all that information with each database call, ColdFusion allows you to defined a data source, providing it a name, and use the name as a reference for all your queries.
</p>	  
<p>	
	If you installed the samples when you installed ColdFusion, then there are some for you to play with already.  Once you have the datasource created, you can start to do CRUD operations.
</p>

<h3>
	Creating a data source:
</h3>


<p>
	<ul>
		<li>
			Login to ColdFusion Administrator.
		</li>
		<li>
			On the left menu under "Data & Services," select "Data Sources."
		</li>
		<li>
			Under "Add New Data Source," enter a name (this will be the name you will use in your code to reference the data source) and select a driver type. The type must * match the database type you are using.
		</li>
		<li>
			Click "Add" to submit the form.
		</li>
		<li>
			The next screen will vary depending on data source type. The following steps are based on selecting "MySQL (4/5)" as a type.
		</li>
		<li>
			Enter database name (name of your database on your server).
		</li>
		<li>
			Enter Server (IP address or domain name of server).
		</li>
		<li>
			Port is defaulted but change it if necessary.
		</li>
		<li>
			Enter username (this is the login that will be tied to all database actions from your application).
		</li>
		<li>
			Enter Password.
		</li>
		<li>
			Enter a description if necessary.
		</li>
		<li>
			This is not a requirement, but you can click on "advanced settings" and make any adjustments there.
		</li>
		<li>
			Click "Submit" to save.
		</li>
		<li>
			The data source will validate; if there are any errors they will be reported on screen.
		</li>
		<li>
			If necessary, correct any errors until the datasource validates upon save.
		</li>
	</ul>
</p>

<h3>
	Basic query:
</h3>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery"&gt; 
    SELECT * FROM artists 
&lt;/cfquery&gt;
</pre>
<p>
	The query result is stored in the variable with the same name as they query name. To see the result of the query, you can just dump the result.
</p>
<pre class="prettyprint">
&lt;cfdump var="#myQuery#" /&gt;
</pre>	
<p>
	The dump will contain information on caching status, execution time, actual sql statement, and the entire result set.  Don’t let the dump confuse you; the result is not stored in a “resultset” variable.  That is just how cfdump shows it.
</p>	

<p>
	There is other information about the query that cfdump does not display that are part of the myquery object, such as columnlist and recordcount.  These can be referenced by using myquery.columnlist or myquery.recordcount.
</p>

<h4>
	Performance tip:
</h4>

<p>
	The query should only return the columns you need; this speeds up the query and return processing.  For example, since the output in the above example only used email, firstname, and lastname, the query should be changed from "select *" to "select email, firstname, and lastname.”
</p>

<h2>
	Query output
</h2>

<p>
	While cfdump is a great way to make sure the query is working, it isn’t very useful output to a user.  Using cfoutput, we now gain display control and can display what we want how we want it.
</p>

<pre class="prettyprint">
&lt;cfoutput query="myQuery"&gt;
    #myquery.CurrentRow# - #myquery.email# - #myquery.firstname# - #myquery.lastname#&lt;br /&gt;
&lt;/cfoutput&gt;
</pre>

<p>
	There are times where you may wish to process the query return but not directly output it.  To accomplish this, use cfloop. This tag allows you to loop over the result set and perform operations per row (and output them too). It is also useful in the event that you wish to loop over a query result and there is already an outer cfoutput in the code. The syntax looks identical to cfoutput.
</p>
<pre class="prettyprint">
&lt;cfset artistArray = [] /&gt;
&lt;cfloop query="myQuery"&gt;
    &lt;cfset arrayappend(artistArray, myquery.lastname & ', ' & myQuery.firstname) /&gt;
&lt;/cfloop&gt;
</pre>
<h2>
	Query Output Grouping
</h2>

<p>
	It is also possible to nest cfooutput tags so you can group like data. This creates a nested loop where the outer loop is iterated once per group and the inner is looped once for each item in the group. While this sounds great on the surface, it does have a drawback: the data must be pre-sorted before the cfoutput for the grouping to work correctly. In the example below, an order by is added to the query, which makes sure that the rows come back in the correct order. The cfoutput tag now has a group attribute. The value of this attribute must always be a column name of the query. Inside the cfoutput is another cfoutput. This is the inner loop that will output once per row in the group. The outer will only output once.
</p>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery"&gt; 
    SELECT * FROM art
    ORDER BY issold
&lt;/cfquery&gt;

&lt;cfoutput Query="myQuery" group="issold"&gt;
    &lt;p&gt;
    	Sold ?: #YesNoFormat(myQuery.issold)#:&lt;br /&gt;
    &lt;blockquote&gt;
	    &lt;cfoutput&gt;
	        #myQuery.artname#: #DollarFormat(myQuery.price)#&lt;br /&gt;        
	    &lt;/cfoutput&gt;
    &lt;/blockquote&gt;
    &lt;/p&gt;
    &lt;hr /&gt;
&lt;/cfoutput&gt;
</pre>
<h2>
	Query Param
</h2>

<p>
	One of the biggest attacks against a system is sql injection.  However, and easy way to prevent it is to use cfqueryparam.  This sets parameters for the query input, thus making injection nearly impossible.  cfqueryparam should be used anywhere you have query input.  cfqueryparam is not exclusive to select where clauses; it should also be used for inserts, updates, or any query that has dynamic input.
</p>

<p>
	cfqueryparam is also useful in doing data length validation as well as data type.  For example, if your queryparam is set as an integer and a string is passed, an error will be thrown.  The same is true when a string is longer than the set max length.
</p>

<p>
	<strong>Note: cfqueryparam should be used ALWAYS without exception.</strong>
</p>

<p>
	Query Example:
</p>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery"&gt;  
    SELECT * FROM artists
    WHERE firstname = &lt;cfqueryparam value="#form.name#" cfsqltype="cf_sql_varchar" /&gt;
&lt;/cfquery&gt;
</pre>
<p>
	If you have debugging enabled, the query output in the debug info will look a little different:
</p>
<pre class="prettyprint">
myQuery (Datasource=cfartgallery, Time=1ms, Records=1) i

    SELECT * FROM artists
    WHERE firstname = ?

Query Parameter Value(s) -
Parameter #1(cf_sql_varchar) = Austin
</pre>

<p>
	Notice the “?” in the where clause?  That is the parameter that was created using cfqueryparam. You can also use it to replace a list in an “in” clause:
</p>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery"&gt;  
    SELECT * FROM artists
    WHERE artistid IN (&lt;cfqueryparam value="#form.ids#" list="true" /&gt;)
&lt;/cfquery&gt;


myQuery (Datasource=cfartgallery, Time=2ms, Records=4) i
select * from ARTISTS
where artistid in (?,?,?,?)
Query Parameter Value(s) -
Parameter #1(CF_SQL_CHAR) = 1
Parameter #2(CF_SQL_CHAR) = 2
Parameter #3(CF_SQL_CHAR) = 3
Parameter #4(CF_SQL_CHAR) = 4
</pre>
<h2>
	Query Caching
</h2>

<p>
	Query caching is very easy to implement. Caching will be covered in detail in a later chapter; for now, this chapter will just touch on one way to cache here: cachedwithin.  This type of cache states that the query result will be stored and reused for the specified duration.  Using the previous query example, caching the result can be done like this:
</p>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery" cachedwithin="#createTimespan(0,1,0,0)#"&gt; 
    SELECT * FROM artists 
&lt;/cfquery&gt;
</pre>
<p>
	This would cause the query result to cache for 1 hour.  Caching is based on the query syntax, not the query name.  As long as the syntax doesn’t change, the cache will be used. However, if you have a very dynamic query, caching can be a challenge.  For example, if the below is your query, you might not want to cache it because the sql syntax can vary widely from request to request. Using CFQueryparam does not help in caching at the ColdFusion server level. However, it does assist with database query plans so there is some caching benefit.
</p>

<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery" cachedwithin="#createTimespan(0,1,0,0)#"&gt;    
    SELECT firstname, lastname, email FROM artists  
    WHERE firstname = &lt;cfqueryparam value="#form.firstname#" cfsqltype="cf_sql_varchar" /&gt;
&lt;/cfquery&gt;
</pre>

<h2>
	Dynamic Queries
</h2>

<p>
	Queries are not always straightforward. There may be occurrences in which a where clause or column list needs to be decided upon at runtime. Thankfully, cfquery allows for wide range of dynamics to create the query. Think of it like generating browser output without any markup or cfoutput tags, like a paragraph of text. Knowing that, we can use a variety of ways to generate a dynamic query.
</p>

<h3>
	cftags inside CFQuery
</h3>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery"&gt;  
    SELECT firstname, lastname, email FROM artists  
    WHERE 1 = 1
     &lt;cfif structkeyExists(form, 'firstname') and len(form.firstname)&gt;
        AND firstname = &lt;cfqueryparam value="#form.firstname#" cfsqltype="cf_sql_varchar" /&gt;
    &lt;/cfif&gt;
    &lt;cfif structkeyExists(form, 'lastname') and len(form.lastname)&gt;
        AND lastname = &lt;cfqueryparam value="#form.lastname#" cfsqltype="cf_sql_varchar" /&gt;
    &lt;/cfif&gt;
&lt;/cfquery&gt;
</pre>
<h3>
	Generating sql string outside query
</h3>
<pre class="prettyprint">
&lt;cfset query = 'SELECT firstname, lastname, email FROM artists' /&gt;

&lt;cfquery name="myQuery" datasource="cfartgallery"&gt;  
    #query#
&lt;/cfquery&gt;
</pre>
<h2>
	Limiting result counts
</h2>

<p>
	Returning thousands of rows from a query can be very inefficient. It is good practice to only return the number of rows you are going to deal with. Reducing the result set to a defined number of rows can be done in a variety of ways: You could add a maxrows to the output; you could add a max count to the sql statement itself; or you could add a max to the cfquery tag itself. These are all valid ways to handle it, but choosing which way to handle the result can be a challenge. Adding a limiter to the cfquery tag or in the sql statement limits the rows from the databases, but the max rows on the output just reduces the output. Thus, if you query returned 10,000 rows, your output could have a max of 100, and only display the first 100.
</p>

<pre class="prettyprint">
&lt;cfoutput query="myQuery" maxrows="100"&gt;
    #myquery.CurrentRow# - #myquery.email# - #myquery.firstname# - #myquery.lastname#&lt;br /&gt;
&lt;/cfoutput&gt;
</pre>

<p>
	The issue is that there were 9,900 rows of ignored data. The better approach may be to have the database only return 100 rows, which can be done by setting a max on the initial query.
</p>
<pre class="prettyprint">
&lt;cfquery name="myQuery" datasource="cfartgallery" maxrows="100"&gt;   
    SELECT firstname, lastname, email FROM artists
&lt;/cfquery&gt;
</pre>
<p>
	This way is much more efficient, as less data is transmitted from database to server. It also helps speed things up as ColdFusion no longer has to deal with query data that is not being used.
</p>

<h2>
	Insert and identity retrieval
</h2>

<p>
	When inserting records, you are going to want to know the ID of the inserted item more often than not. Typically, this is achieved by doing the insert, then doing a select and getting the highest ID in the table. While this may work, it is very problematic and may not yield the expected results. Fortunately, there is an alternative that works very well and yields the correct results. Look at the example below:
</p>
<pre class="prettyprint">
&lt;cfquery result="qryResult" datasource="cfartgallery"&gt;
    INSERT INTO art
    (
        artistsID, artName, description, isSold, largeImage, mediaID, price
    )
    VALUES
    (
        &lt;cfqueryparam cfsqltype="CF_SQL_INTEGER" value="1" /&gt;,
        &lt;cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="Test Item" /&gt;,
        &lt;cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="Test Desc" /&gt;,
        &lt;cfqueryparam cfsqltype="CF_SQL_INTEGER" value="1" /&gt;,
        &lt;cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="img.png" /&gt;,
        &lt;cfqueryparam cfsqltype="CF_SQL_INTEGER" value="1" /&gt;,
        &lt;cfqueryparam cfsqltype="CF_SQL_INTEGER" value="1" /&gt;
    )  
&lt;/cfquery&gt;

&lt;cfdump var="#qryResult#" /&gt;
</pre>	
<p>
	Notice in the above a result attribute was added and given a value of "qryResult." This variable is a dumpable structure of data. One of the parts of the data is the ID of the inserted row. It will  also contain the params (if any), execution time, and the sql statement. Depending on your database, the identity variable may be different; dump the result first to see what the column is.
</p>	

<h2>
	Queries in cfscript
</h2>

<p>
	There is a way to run queries if you really like writing all your code in script syntax; it is slightly more complicated, but has all the same functionality that the tag based syntax has. There are many ways to implement using queries in script. The example below is just one of those ways. The one main difference is that with script based query, you actually have to tell ColdFusion to execute the query; the query doesn't just run by creating it. Also, it will be necessary to get the query result by using the getResult() function.
</p>

<h3>
	Basic Example
</h3>
	
<pre class="prettyprint">
myQry = new Query();
myQry.setDatasource("cfartgallery"); 
myQry.setSQL("SELECT firstname, lastname, email FROM artists");
myQuery = myQry.execute();
writeDump(myQuery.getResult());
writeDump(myQuery.getPrefix());
</pre>

<h3>
	Streamlined Example
</h3>

<p>
	Using chaining and adding params to the query initialization, the code can be reduced to a single line:
</p>

<pre class="prettyprint">
myQueryResult = new Query(sql="SELECT firstname, lastname, email FROM artists", datasource="cfartgallery").execute().getResult();
writeDump(myQueryResult);
</pre>

<h3>
	Using query params
</h3>

<p>
	Just like the tag based version, you can easily add query params to the query. For the script syntax you have to define a matching pair, which is the param name in the query; the added param must match. If they don't match, an error will be thrown.
</p>

<pre class="prettyprint">
myQry = new Query();
myQry.setDatasource("cfartgallery"); 
myQry.setSQL("SELECT artname, description FROM art WHERE issold = :sold");
myQry.addParam(name: "sold", value: "1", cfsqltype: "CF_SQL_INT");
myQuery = myQry.execute();
writeDump(myQuery.getResult());
writeDump(myQuery.getPrefix());
</pre>

-------------------------------

json

<p>
	JSON or, JavaScript Object Notation, is a simple way for applications to share data. It is commonly used to send data from a server to a browser client, but it can be used for much more. It closely resembles XML without the markup or, more accurately, a struct of structs. Creating JSON data in ColdFusion is just about as easy as setting a variable.
</p>

<h2>
	Create JSON string
</h2>

<p>
	To create JSON, you first need to start with a structure. For example:
</p>

<p>
	Structure:
</p>

<pre class="prettyprint">
&lt;cfset myStruct = {
    items: {
        item1:  {name: 'something', price: 1000},
        item2:  {name: 'something else', price: 12.50},
        item3:  {name: 'something more', price: "1,240.10"}
    },
    users: {
        user1:  {id: 1, email: 'none@none.net'},
        user2:  {id: 2, email: 'none@none.net'},
        user3:  {id: 3, email: 'none@none.net'}
    }
} /&gt;
</pre>	
<p>
	Then convert it to JSON
</p>		
<pre class="prettyprint">
&lt;cfset myJsonVar = serializeJSON(myStruct) /&gt;
</pre>	
<p>
	End Result:
</p>	
<pre class="prettyprint">
{"USERS":{"USER3":{"ID":3,"EMAIL":"none@none.net"},"USER2":{"ID":2,"EMAIL":"none@none.net"},"USER1":{"ID":1,"EMAIL":"none@none.net"}},"ITEMS":{"ITEM2":{"PRICE":12.50,"NAME":"something else"},"ITEM3":{"PRICE":"1,240.10","NAME":"something more"},"ITEM1":{"PRICE":1000,"NAME":"something"}}}
</pre>

<p>
	Notice, however, that all the names in the name/value pairs have been converted to uppercase. This is default behavior, but it can be easily remedied. It is caused by how the structure is created. If we alter the structure creation to the following, the names will not change case:
</p>
<pre class="prettyprint">
"items": {
    "item1":    {name: 'something', price: 1000},
    "item2":    {name: 'something else', price: 12.50},
    "item3":    {name: 'something more', price: "1,240.10"}
},
</pre>
<p>
	Any name that needs to remain in lower cause would need to be quoted. Leaving it uppercase is just fine, but remember that if the JSON data is being used by JavaScript, then be careful as JS is case sensitive.
</p>

<h2>
	Convert JSON to structure
</h2>

<p>
	Converting a JSON string to a ColdFusion structure requires  one single function:
</p>
<pre class="prettyprint">
&lt;cfset myJsonStruct = deserializeJSON(myJsonVar) /&gt;
</pre>	
<h2>
	Validate string as JSON
</h2>	

<p>
	Checking to see if a string is in a valid JSON format is simple as well. All it takes is a call to a validator function:
</p>
<pre class="prettyprint">
&lt;cfdump var="#isJson(myJsonVar)#" /&gt;
</pre>	

------------------

XML


<p>
	Dealing with XML in ColdFusion is fairly straightforward. ColdFusion provides many built-in functions for doing all sorts of XML based operations. Some of those functions provide streamlined access to create, read, and search an xml document. You can also validate XML data against a DTD or schema and transform XML using XSLT.
</p>


<h2>
	Reading an XML document	
</h2>

<p>
	Reading in an existing XML document can be done a few ways. For example, you can read the file then process it as XML, or you can have the XML parser read the file.
</p>

<p>
	This example reads the file in and then passes it to the parser to create an XML object:
</p>

<pre class="prettyprint">
&lt;cffile action="read" file="#ExpandPath("./order.xml")#" variable="myxml" /&gt; 
&lt;cfset mydoc = XmlParse(myxml) /&gt; 
</pre>
<p>
	Alternatively, you can just have the xmlparse function read in the file, thus skipping a step:
</p>
<pre class="prettyprint">
&lt;cfset mydoc = XmlParse(ExpandPath("./order.xml")) /&gt; 
</pre>	
<p>
	The xmlparse function takes the XML document and converts the XML to an object. This now allows you to read the XML as a structure, or depending on XML complexity, an array of structs. You can use cfdump on the result of the xmlparse to see the object.
</p>		
<pre class="prettyprint">
&lt;cfdump var="#mydoc#" /&gt; 
</pre>	
<p>
	Dumping the XML will display a short version of the XML. You can click on the dump where it says "[short version]" and it will expand to a long version of the XML. The long version shows how ColdFusion is referencing the XML.
</p>	

<h2>
	Creating an XML Document
</h2>

<p>
	Creating XML in ColdFusion is just as easy as generating HTML output. The cfxml tag is used to generate the XML output:
</p>
<pre class="prettyprint">
&lt;!---Get some data from, in this case, the database---&gt;
&lt;cfquery name="getData" datasource="cfartgallery" &gt;
    select ARTISTID, ARTID, ARTNAME, DESCRIPTION, ISSOLD, PRICE, LARGEIMAGE from ART
    where artistid = 1
&lt;/cfquery&gt;

&lt;!---Process the query result and generate xml---&gt;
&lt;cfxml variable="artxml"&gt; 
&lt;art artistid="&lt;cfoutput&gt;#getdata.artistid#&lt;/cfoutput&gt;"&gt; 
    &lt;cfoutput query="getData"&gt; 
        &lt;piece id="#getData.artid#" available="#getdata.isSOLD#"&gt;
            &lt;artname&gt;#getData.artname#&lt;/artname&gt;
            &lt;description&gt;#getData.artNAME#&lt;/description&gt;
            &lt;image&gt;#getData.LARGEIMAGE#&lt;/image&gt;     
            &lt;price&gt;#getData.PRICE#&lt;/price&gt;  
        &lt;/piece&gt;
    &lt;/cfoutput&gt;
&lt;/art&gt;
&lt;/cfxml&gt;
</pre>

<h3>
	Write xml out to file
</h3>
<pre class="prettyprint">
&lt;cffile action="write" file="#expandpath('./out.xml')#" output="#artxml#" /&gt;
</pre>	
<h3>
	Dump output to the browser
</h3>	
<pre class="prettyprint">
&lt;cfdump var="#artxml#" /&gt;
</pre>	
<h2>
	Parsing XML
</h2>	

<p>
	ColdFusion provides a single, yet powerful, function to parse XML. This function can read a file, URL, or a string containing XML. It can also validate the XML based on a DTD or schema.
</p>

<h3>
	Basic parse using an XML document
</h3>
<pre class="prettyprint">
&lt;cfset mydoc = xmlParse(ExpandPath("./order.xml", true)) /&gt;
</pre>	
<p>
	When parsing the XML, you can have the parsing function maintain case of the XML nodes or ignore case altogether. If it is necessary to maintain case, then referencing the XML content will change slightly. Assuming that the above XML parse (with case sensitivity turned on) returned the XML below, let’s go over some of the nuances.
</p>		
<pre class="prettyprint">
&lt;myArt&gt;
    &lt;art&gt;
        &lt;itemName Type="1"&gt;art name&lt;/item&gt;
    &lt;/art&gt;
&lt;/myArt&gt;  
</pre>
<p>
	In the above example, the root note is "myArt". Typically you can reference the root like this:
</p>
<pre class="prettyprint">
mydoc.myart
</pre>
<p>
	But with case sensitivity on this will cause an error, even if the root node is lowercase. The correct way to reference it:
</p>
<pre class="prettyprint">
mydoc.xmlRoot
</pre>
<p>
	The same is also true with nodes and attributes. With case sensitivity off, this is perfectly valid:
</p>
<pre class="prettyprint">
mydoc.myart.art[1].itemname.xmltext
</pre>
<p>
	But with case sensitivity on, the same is accomplished using associative array (bracket) notation.
</p>
<pre class="prettyprint">
mydoc.XMLRoot.xmlChildren[1]["itemName"]
</pre>
<p>
	The bracket syntax is not exclusive to case sensitivity. You can use it even if case sensitivity is off.
</p>

<h2>
	XML Datatype and Strings
</h2>

<p>
	At its core, XML is just a fancy string. The xmlparse function takes the string and converts it to something useful. The XML string then becomes an XML datatype in ColdFusion. This datatype is an array of structures and arrays. When saving XML to a document you need to save the XML as a string, not as the XML datatype. Converting the XML to a string is as simple as parsing the XML to begin with; all it takes is a single function call.
</p>
<pre class="prettyprint">
&lt;cfset xmlString = toString(myDoc) /&gt;
</pre>	
<h2>
	Looping over XML
</h2>	

<p>
	Looping over data in ColdFusion is not very complicated; however, looping over XML can be a little troublesome. This is due to nesting of nodes, attributes, and case sensitivity. Below are two examples of looping over XML. The XML source for this was the same generated XML from the create XML example above.
</p>

<p>
	The first example takes into account that we know the XML structure. This makes it fairly easy to deal with as we can directly reference the structures in the code:
</p>
<pre class="prettyprint">
&lt;cfloop array="#artxml.art.xmlchildren#" index="i" &gt;
    &lt;cfoutput&gt;
        name: #i.artname.xmlText#&lt;br/&gt;
        price: #i.price.xmlText#&lt;br/&gt;
        Available? #yesNoFormat(i.xmlAttributes["available"])#
    &lt;/cfoutput&gt;
    &lt;br /&gt;
&lt;/cfloop&gt;
</pre>	

<p>
	The above example loops over the xmlChildren of the art node in the XML. By doing it this way, we can treat all the children as an array. This then allows us to isolate each node and reference each item in the node. We can also reference the attributes and output them as well.
</p>

<p>
	However, what if we didn't know the XML structure or wanted to process it as if we didn't? Using cfdump would allow us to see the structure and write code accordingly, but that is not always an option. Also, what if you want to do something with the XML node names and/or content? The example below is written as though nothing is known about the XML structure. While it is not a complete example, you should get the idea.
</p>
<pre class="prettyprint">
&lt;cfloop array="#artxml.xmlRoot.xmlchildren#" index="i" &gt;
    &lt;cfoutput&gt;
        &lt;cfif structKeyExists(i, "xmlattributes")&gt;
            &lt;cfloop collection="#i.xmlattributes#" item="a" &gt;
                #a#: #i.xmlAttributes[a]#&lt;br/&gt;
            &lt;/cfloop&gt;
        &lt;/cfif&gt;
        &lt;cfloop array="#i.xmlchildren#" index="x"&gt;
        #x.xmlName#: #x.xmlText#&lt;br/&gt;
        &lt;/cfloop&gt;
    &lt;/cfoutput&gt;
    &lt;br /&gt;
&lt;/cfloop&gt;
</pre>
<p>
	This example uses the underlying XML structure to get attributes, node names, and note text. It works just like the previous example, but it outputs all nodes for each item based on their node name. This is done by looking at each node and treating its children as an array. It also checks the root node for any attributes and outputs them as necessary.
</p>

<h2>
	Setting XML Node Value
</h2>

<p>
	Setting the value of a node is just about as easy as outputting it. Taking the example XML created previously as a base, let’s update the prices.
</p>
<pre class="prettyprint">
&lt;cfloop array="#artxml.art.xmlchildren#" index="i"&gt;
    &lt;!---price increase by 20% ---&gt;
    &lt;cfset i.price.xmlText = i.price.xmlText*.2 /&gt;
&lt;/cfloop&gt;
</pre>
<p>
	Setting an attribute works about the same. However, we look at the attributes of the node using an associative array and change the available value instead.
</p>
<pre class="prettyprint">
&lt;cfloop array="#artxml.art.xmlchildren#" index="i" &gt;
    &lt;!--- make all items available ---&gt;
    &lt;cfset i.xmlAttributes['available'] = 1 /&gt;
&lt;/cfloop&gt;
</pre>
<h2>
	Convert XML to query result set
</h2>

<p>
	Sometimes dealing with large XML files can be cumbersome. Depending on the content of the XML, you can convert it to a query result type structure that will make it a little easier to reference. This is done by using a combination of query, XML, and array functions. Using the previously generated, we will take the it and convert it to a query:
</p>
<pre class="prettyprint">
    artQuery = QueryNew("artistid, artid, name, description, image, price, sold"); 
    queryAddRow(artQuery, arraylen(myDoc.art.piece));

    for (i = 1; i lte arraylen(myDoc.art.piece); i++){
        thisItem = mydoc.art.piece[i];
        QuerySetCell(artQuery, "artistid", mydoc.art.xmlAttributes.artistid, i);
        QuerySetCell(artQuery, "artid", thisItem.xmlAttributes.id, i);
        QuerySetCell(artQuery, "sold", thisItem.xmlAttributes.available, i);
        QuerySetCell(artQuery, "name", thisItem.artname.xmltext, i);
        QuerySetCell(artQuery, "description", thisItem.description.xmltext, i);
        QuerySetCell(artQuery, "image", thisItem.image.xmltext, i);
        QuerySetCell(artQuery, "price", thisItem.price.xmltext, i);

    }

    writedump(artQuery);
</pre>
<p>
	The above example will dump out a query object. You can then use the same query object in a cfoutput or in a cfloop.
</p>

<h2>
	Searching XML
</h2>

<p>
	ColdFusion 10 supports XPath 2.0 for XMLSearch() and XMLTransform(). This allows for using parameters when searching XML so you can build complicated searches with ease. The example below is just one of many ways to search XML. In the example below, the first step is to load and parse the XML (using XML created above). Then a param is created for the search. Next, the search is performed using the param. The search is looking for a node value of "Mary", where the value resides in the piece/artname path. The "//" before piece means that the node piece can have any parent. The result of the search is an array of results; also, the result is just the node found. Therefore, in the dump, the return var must be treated as an array. It is also necessary to get the parent of the found node so we get the entire art node for the item.
</p>
<pre class="prettyprint">
&lt;cffile action="read" file="#expandPath('./out.xml')#" variable="myxml" /&gt;

&lt;cfset mydoc = XmlParse(myxml) /&gt;
&lt;cfscript&gt; 
    params = structNew(); 
    params["artname"] = "Mary"; 
&lt;/cfscript&gt; 

&lt;cfset searchRes = xmlSearch(myxml, '//piece/artname[. = $artname]', params) /&gt;

&lt;cfdump var="#searchRes[1].xmlParent#" /&gt;
</pre>



































